import {
  Component, OnDestroy, OnInit,
} from '@angular/core';
import { Store } from '@ngrx/store';
import { Observable } from 'rxjs/Observable';
import { Subscription } from 'rxjs/Subscription';
import { CopyWlModel } from '../../reducers/copy-wl.reducer';
import { DeleteWlModel } from '../../reducers/delete-wl.reducer';
import { animate, keyframes, state, style, transition, trigger } from '@angular/animations';

@Component({
  selector: 'modal',
  styleUrls: ['./modal.component.scss'],
  templateUrl: './modal.component.html',
  animations: [
    trigger('animateComponent', [
      state('start', style({
        opacity: '0',
        transform: 'translateY(50px)'
      })),
      state('end', style({
        opacity: '1',
        transform: 'translateY(0)'
      })),
      transition('start <=> end', animate('0.3s')),
    ]),
    trigger('animateOverlay', [
        state('*', style(
          {
            opacity: 0.4
          }
        )),
        // route 'enter' transition
        transition(':enter', [
          // css styles at start of transition
          style(
            {
              opacity: 0.0
            }
          ),
          // animation and styles at end of transition
          animate('0.2s'),
        ]),
      ]
    )
  ]
})
export class ModalComponent implements OnInit, OnDestroy {
  public isModalVisible: boolean = false;

  public deletewl: DeleteWlModel;
  public copywl: CopyWlModel;

  private copyWlState: Observable<any>;
  private subscriptionCopyWl: Subscription;

  private deleteWlState: Observable<any>;
  private subscriptionDeleteWl: Subscription;

  public animationState = 'start';

  constructor (private store: Store<any>) {}

  ngOnInit () {
    this.copyWlState = this.store.select('copywl');
    this.subscriptionCopyWl = this.copyWlState.subscribe((store) => {
      this.copywl = store;
    });

    this.deleteWlState = this.store.select('deletewl');
    this.subscriptionDeleteWl = this.deleteWlState.subscribe((store) => {
      this.deletewl = store;
    });
  }

  ngOnDestroy () {
    this.subscriptionCopyWl.unsubscribe();
    this.subscriptionDeleteWl.unsubscribe();
  }

  openModal () {
    this.isModalVisible = true;
    this.animationState = 'end';
  }

  closeModal () {
    this.isModalVisible = false;
    this.animationState = 'start';
  }
}
