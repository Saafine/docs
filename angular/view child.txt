import {
  Component, ElementRef, OnDestroy,
  OnInit, ViewChild
} from '@angular/core';

import {Observable} from 'rxjs/Observable';
import {Store} from '@ngrx/store';
// import { ProjectModel } from '../../../reducers/project.reducer';
import * as ProjectPropertiesActions from '../../../actions/project.properties.actions';

import {PropertiesModel} from '../../../reducers/project.properties.reducer';
import {Subscription} from 'rxjs/Subscription';

@Component({
  selector: 'create-project-properties',
  styleUrls: ['./create-project-properties.component.scss'],
  templateUrl: './create-project-properties.component.html'
})

export class CreateProjectPropertiesComponent implements OnInit, OnDestroy {
  public properties: PropertiesModel;

  private subscription: Subscription;
  private projectState: Observable<PropertiesModel>;
  @ViewChild('projectName') private projectName: ElementRef;
  @ViewChild('projectPath') private projectPath: ElementRef;
  @ViewChild('projectDescription') private projectDescription: ElementRef;

  constructor (private store: Store<PropertiesModel>) {}

  ngOnInit () {
    this.projectState = this.store.select('projectProperties');
    this.subscription = this.projectState.subscribe((store) => {
      this.properties = store;
    });
  }

  ngOnDestroy () {
    this.subscription.unsubscribe();
  }

  public changeProjectName () {
    this.store.dispatch(new ProjectPropertiesActions.SetProjectName(this.projectName.nativeElement.value));
  }

  public changeProjectPath () {
    this.store.dispatch(new ProjectPropertiesActions.SetProjectPath(this.projectPath.nativeElement.value));
  }

  public changeProjectDescription () {
    this.store.dispatch(new ProjectPropertiesActions.SetProjectDescription(this.projectDescription.nativeElement.value));
  }
}
